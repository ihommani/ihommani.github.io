<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thinking about...</title><link href="/" rel="alternate"></link><link href="/feeds/technical.atom.xml" rel="self"></link><id>/</id><updated>2016-09-01T13:09:00+02:00</updated><entry><title>Go beyond in the functionnal paradigm with Javaslang</title><link href="/javaslang.html" rel="alternate"></link><published>2016-09-01T13:09:00+02:00</published><author><name>ihommmani</name></author><id>tag:,2016-09-01:javaslang.html</id><summary type="html">&lt;h1&gt;Functional paradigm vs Object paradigm&lt;/h1&gt;
&lt;h1&gt;Java 8 a brand new world&lt;/h1&gt;
&lt;p&gt;Not so long ago I used to code with Java in a world exclusively dedicated to the Object paradigm. 
Indeed Java 7 was not offering what many languages already were, namely streams and lambdas.&lt;br /&gt;
Then in march 2014 Java 8 was released.
The promise was to open the Java world to functional programming.&lt;br /&gt;
Thanks to the new Stream API and lambdas this was now possible.  &lt;/p&gt;
&lt;p&gt;However, when comparing Java 8 features with the one provided by pure functional languages (Scala, Haskell)
we still have a gap.&lt;br /&gt;
It appears that Java 8 can still progress into the functional paradigm.&lt;br /&gt;
This is where JavaSlang gets interesting. JavaSlang is a java library developed on top of Java 8 that reimplements some&lt;br /&gt;
of basic data structures (especially collections) to make it fit better the functional paradigm.&lt;br /&gt;
Also with the addition of new data structures, it's an all new world that opens to us. &lt;/p&gt;
&lt;p&gt;In this article I want to give my feedback on JavaSlang's use and show how it can helps in the code expresivity.&lt;/p&gt;
&lt;h1&gt;Requirements and Installation&lt;/h1&gt;
&lt;p&gt;As a library build on top of Java 8, &lt;strong&gt;javaslang requires a JRE 8 to work&lt;/strong&gt;.&lt;br /&gt;
Installation is fairly easy, based on the fact you use a build tool like Maven or Gradle.&lt;br /&gt;
Just add a dependency to your project. 
Sources are available on the &lt;a href="https://github.com/javaslang/javaslang" title="javaslang"&gt;github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Java 8 defects&lt;/h1&gt;
&lt;p&gt;Once passed the wow effect of the Java 8 stream API. Here what we can complain about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We have to convert back and forth collections when we want to apply lambda on it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list.stream().map(...).collect(Collectors.toList())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Why open a stream instead of applying directly lambdas on the list elements ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map structure is not well handled by the Stream API&lt;/p&gt;
&lt;p&gt;The way we treat maps through stream is not very intuitive.
    &lt;code&gt;hashMap.entries.stream().map(entry -&amp;gt; ...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Where we would have seen
    &lt;code&gt;hashMap.entries.stream().map((key, value)-&amp;gt; ... )&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lambdas' inability to throw checked exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;JavaSlang goodness&lt;/h1&gt;
&lt;h2&gt;Javaslang and the functional paradigm&lt;/h2&gt;
&lt;p&gt;Using and learning about Javaslang showed me one important thing.&lt;br /&gt;
&lt;strong&gt;Java 8 is not that functional&lt;/strong&gt;. It is still deeply rooted in the OO paradigm.  &lt;br /&gt;
It allows to apply functionnal patterns with stream and lambda but is not striclty speaking a functional language.    &lt;/p&gt;
&lt;p&gt;So, what is the difference between an OO language and FP language ?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;FP imposes discipline upon assignment[...] &lt;br /&gt;
A true functional programming language has no assignment operator. You cannot change the state of a variable.&lt;/em&gt;
Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yep. It's an all word that opened to my brain washed oriented object mind :)&lt;/p&gt;
&lt;p&gt;In OO we mainly expose void methods to modify the state of an object. 
According to Javaslang's creator: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I comprehend a void return type as a smell. It is evidence that side-effects take place, state is mutated.&lt;br /&gt;
Shared mutable state is an important source of failure, not only in a concurrent setting.&lt;/em&gt;
Daniel Dietrich&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;How Javaslang does it ?&lt;/h2&gt;
&lt;p&gt;JavaSlang provides new APIs and data structures to tackle those issues.&lt;br /&gt;
Unlike utilities such as Guava it is not meant to really cohabit with standard Java.&lt;br /&gt;
It replaces it where it needs to. In particular in the implementation of the Java Iterable interface.
This approach gives Javaslang enough liberty to choose immutability over mutability.&lt;br /&gt;
And this gives a true functional flavour to Java. &lt;/p&gt;
&lt;h2&gt;Immutability&lt;/h2&gt;
&lt;p&gt;Java by default creates mutable data structures, i.e one can operate directly on a structure instance.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;list.add(3) // list has the 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map.remove(5) // 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Javaslangs' data structures are &lt;a href="https://en.wikipedia.org/wiki/Persistent_data_structure"&gt;persistent&lt;/a&gt; and therefore "effectively immutable".&lt;br /&gt;
In short, their operations do not (visibly) update the structure in-place, but instead always yield a new updated structure.&lt;br /&gt;
Do not worry about performance issues, Javaslang share what can be shared :) .  &lt;/p&gt;
&lt;p&gt;This example helped me to understand what it means:  &lt;/p&gt;
&lt;p&gt;In java we can create a list of three integers as follow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List&amp;lt;Integer&amp;gt; elements = new ArrayList&amp;lt;Integer&amp;gt;  
elements.add(1);  
elements.add(2);  
elements.add(3);    

// elements.size() == 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The add method has no return type (void) and does perform side effect on the list element by adding new elements into it.&lt;/p&gt;
&lt;p&gt;In JavaSlang, the same example would be: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List&amp;lt;Integer&amp;gt; elements = List.empty();
elements.push(3).push(2).push(3);
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// If we get elements. It is still empty
// elements.size() == 0 !
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In fact we have to assign the list returned by push to get the &lt;strong&gt;new&lt;/strong&gt; list. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List&amp;lt;String&amp;gt; filledElements = elements.push(3).push(2).push(3);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Strange at first, but nice !&lt;br /&gt;
This is the case for all data structures in JavaSlang.&lt;/p&gt;
&lt;h2&gt;Functional data structures API&lt;/h2&gt;
&lt;p&gt;In Java 8 we tend to separate the data collection from the operations. &lt;br /&gt;
That obliges us to open a stream on a list (datas), performs operations on it (stream elements), and then recollect it. &lt;/p&gt;
&lt;p&gt;If we think stream as a lazy list of operations, it is as if we had to clip two lists together to get a refined list.&lt;/p&gt;
&lt;p&gt;Wouldn't it be simpler to directly operate on the list instead of a stream ?
Javaslang thinks so. Simpler and more expressive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List&amp;lt;String&amp;gt; toto = List.of(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;).map(operation1).map(operation2);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;No more recollection.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;One of the pain point when working on Map with Java, is the unability to simply parcour map entries.&lt;br /&gt;
In javaSlang this is very easy as the map method accepts a bifunction.&lt;br /&gt;
A rather complex operation in java such as inverting the pair key/value in a Map:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;We&lt;/span&gt; &lt;span class="nt"&gt;use&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="nt"&gt;collector&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;two&lt;/span&gt; &lt;span class="nt"&gt;Functions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;map&lt;/span&gt;&lt;span class="nc"&gt;.entrySet&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="nc"&gt;.stream&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="nc"&gt;.collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Collectors&lt;/span&gt;&lt;span class="nc"&gt;.toMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;Map&lt;/span&gt;&lt;span class="nc"&gt;.Entry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:getValue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;Map&lt;/span&gt;&lt;span class="nc"&gt;.Entry&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:getKey&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ends up in javaslang with: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// We use one bifunction (Function2&amp;lt;String, String, Tuple2&amp;lt;String, String&amp;gt;&amp;gt;)
map.map((key, value) -&amp;gt; Tuple.of(value, key));
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Stream on steroids&lt;/h2&gt;
&lt;p&gt;Most functional operations on collections do not require to open a stream anymore.&lt;br /&gt;
So in most cases Stream will not be as needed as it is with standard java.   &lt;/p&gt;
&lt;p&gt;In fact, in javaSlang we use Streams for what they really are i.e a linked list of operation lazily evaluated and not what they allow to do.
Let's precise this thought. &lt;/p&gt;
&lt;p&gt;In java 8 the vast majority of my Stream API use cases are with collections.&lt;br /&gt;
From a collection (List or Map) I open a stream to aggregate operations and finally consume the stream by collecting the stream element.
Like we saw, in JavaSlang, we directly do this on the List/Map object.
So why do we need streams for ?&lt;/p&gt;
&lt;p&gt;1) &lt;strong&gt;Stream are lazily evaluated&lt;/strong&gt;&lt;br /&gt;
When collecting operation, you don't need/want to apply it at once (eagerly).&lt;br /&gt;
For instance you may need an element you'll catch later in your execution flow, to apply it in a filter for instance. &lt;/p&gt;
&lt;p&gt;2) &lt;strong&gt;Data contained into a stream can be expressed through logical expressions&lt;/strong&gt;&lt;br /&gt;
What if I need to represent all the prime number. Remember, it is infinite :) 
First solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List.of(1, 3, 5, 7, 11 ....)  // See you at the end of eternity . Anyway your computer has not enough memory.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; // = Stream(2L, 3L, 5L, 7L, ...)
 Stream.iterate(2L, PrimeNumbers::nextPrimeFrom)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;helpers&lt;/span&gt;    
 &lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="nt"&gt;long&lt;/span&gt; &lt;span class="nt"&gt;nextPrimeFrom&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;long&lt;/span&gt; &lt;span class="nt"&gt;num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;  
     &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PrimeNumbers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;isPrime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
 &lt;span class="p"&gt;}&lt;/span&gt;  

 &lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="nt"&gt;boolean&lt;/span&gt; &lt;span class="nt"&gt;isPrime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;long&lt;/span&gt; &lt;span class="nt"&gt;num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
     &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rangeClosed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
 &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Beautiful, isn't it ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Streams allow to express a level of abstraction that list structures can't.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;So how do I access the processed elements of a stream ? Do we need to collect or do something else ?&lt;br /&gt;
Oddly enough, there is no such thing as Collector in JavaSlang.
In fact, you can directly access the element of a stream.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// b
Stream.of(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;).get(1)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 2
Stream.ofAll(List.of(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)).size()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you really want to get it into a collection, we can think of: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; HashMap.ofEntries(Stream.of(Tuple.of(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;)));
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List.ofAll(Stream.of(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;))
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Traversables and Seq&lt;/h2&gt;
&lt;p&gt;Lists, Maps and Streams are all implementations of &lt;a href="http://static.javadoc.io/io.javaslang/javaslang/2.0.0/javaslang/collection/Traversable.html"&gt;Traversable&lt;/a&gt; 
and &lt;a href="http://static.javadoc.io/io.javaslang/javaslang/2.0.0/javaslang/collection/Seq.html"&gt;Seq&lt;/a&gt; (except Map) interfaces. &lt;br /&gt;
They offer a complete set of methods, we unfortunately don't have in standard Java.&lt;br /&gt;
Here is a few of them, the complete list is to be found on the doc API.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sliding ~ windows function in SQL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;slicing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;zip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;crossProduct&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dropUntil&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I highly suggest to read them all once, so you can have an idea of how you can simplify your existing code using these new methods.&lt;/p&gt;
&lt;h2&gt;New data structures&lt;/h2&gt;
&lt;p&gt;JavaSlang is also a new set of data&lt;/p&gt;
&lt;h3&gt;Tuple&lt;/h3&gt;
&lt;p&gt;Something we really miss in java. A collection of elements of different types.&lt;br /&gt;
&lt;strong&gt;To use carrefully though&lt;/strong&gt;.  It should not replace the notion of class.  &lt;/p&gt;
&lt;p&gt;When we come from Java, we tend to see everything as a class. &lt;br /&gt;
So a Tuple can be seen as a class with poor expressiveness since we access its elements&lt;br /&gt;
through standard getters (_1, _2,...,_8) that do not say much on the underlying element.  &lt;/p&gt;
&lt;p&gt;What I see in tuples is a "context" factory on the fly. For instance in javaSlang, Maps are list of Tuple2 and not of 'MapEntry' objects... 
It is very handy to use when chaining lambda operations, because it allow to return several outputs packaged into one Tuple.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;int&lt;/span&gt; &lt;span class="nt"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;42&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;listOfvalues&lt;/span&gt;&lt;span class="nc"&gt;.map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;Tuple2&lt;/span&gt;&lt;span class="nc"&gt;.of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;inputValue&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="nc"&gt;.foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;this&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:operation&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void operation(Tuple2&amp;lt;String, int&amp;gt; tuple){
    // make something with tuple._1

    // make something with tuple._2
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Try&lt;/h3&gt;
&lt;p&gt;In java, lambdas cannot throw checked exceptions.&lt;br /&gt;
Javaslang offers a specific data structure to wrap lambdas that may fail in error.  &lt;/p&gt;
&lt;h3&gt;Option&lt;/h3&gt;
&lt;p&gt;In java8 we have optionals.&lt;br /&gt;
Its constructor, &lt;em&gt;Optional.of()&lt;/em&gt; throws an NPE on a null reference (not necessarily a bad thing). To handle null reference we have Optional.ofNullable(). &lt;br /&gt;
In javaSlang there is only one constructor &lt;em&gt;Option.of()&lt;/em&gt;. It is the only real difference I noticed with Java optional.&lt;br /&gt;
In usage we rather use the same pattern than in standard java. &lt;/p&gt;
&lt;h3&gt;Pattern matching&lt;/h3&gt;
&lt;p&gt;I haven't used this feature much. It is still in development and integration with Intellij is not really that good.  &lt;/p&gt;
&lt;h1&gt;Drawbacks&lt;/h1&gt;
&lt;h2&gt;Naming collision&lt;/h2&gt;
&lt;p&gt;JavaSlang is a layer above standard Java8 to make it more functional.&lt;br /&gt;
It reimplements many structures.&lt;br /&gt;
The drawback lies in the word "reimplementation".  &lt;/p&gt;
&lt;p&gt;Where Guava is more an utility to ease the use of Standard Java and cohabites well with Java,
JavaSlang will struggle to do so.&lt;br /&gt;
Because of naming collision (List and Map for instance), working in the same class with standard java and javaslang is cumbersome.&lt;br /&gt;
When using javaSlang inside a class it has to be isolated and be exclusively used.
That brings us to another drawback.&lt;/p&gt;
&lt;h2&gt;Cooperation with other modules&lt;/h2&gt;
&lt;p&gt;We don't have the control on all the code we work with. Using a tierce SDK for instance.&lt;br /&gt;
Other libraries surely don't use JavaSlang.&lt;br /&gt;
That create contention points where we need to convert a Java util list into a javaSlang list for instance. Same thing for maps and stream.
Although JavaSlang provides utilities such as toJavaList, List.ofAll, this work stay tedious.&lt;/p&gt;
&lt;h2&gt;Watch out NullPointerExceptions&lt;/h2&gt;
&lt;p&gt;Thes transformations are not harmless either.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;javaslangList.toJavaList()
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List.ofAll(javaList)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Are as many potential NPE we have to be carefull on.&lt;/p&gt;
&lt;h1&gt;Should I consider Java for my code ?&lt;/h1&gt;
&lt;p&gt;It depends.&lt;/p&gt;
&lt;p&gt;First of all you need your project to run on Java 8. &lt;br /&gt;
The second and as mandatory condition, the code you modify must be tested hard !&lt;br /&gt;
As far as I am concerned I took the opportunity to modify production code with Javaslang only because of unit tests and
integration tests. &lt;br /&gt;
Forget it on untested legacy code.&lt;/p&gt;
&lt;p&gt;If you intend to develop a library you want to share, I would not recommand to add an extra dependency to the library's consumers. &lt;br /&gt;
This &lt;a href="https://blog.jooq.org/2016/08/11/all-libraries-should-follow-a-zero-dependency-policy/"&gt;nice article&lt;/a&gt; explain this point of view.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;JavaSlang is really worth the try. It brings java functional development to a more pragmatic level.&lt;br /&gt;
It is also glimpse of what other functional languages offer.&lt;br /&gt;
We have however seen that it comes at a price. Wether you can afford this cost or not should not
detere you from trying it. At least to see what other functional languages offer, in comparaison to Java without having to.&lt;/p&gt;</summary><category term="java"></category></entry><entry><title>Two-Factor Authentication</title><link href="/2fa.html" rel="alternate"></link><published>2014-02-01T13:09:00+01:00</published><author><name>ihommmani</name></author><id>tag:,2014-02-01:2fa.html</id><summary type="html">&lt;p&gt;&lt;img alt="Login security" src="/images/FEDTECH_2FA.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Extra security&lt;/h2&gt;
&lt;p&gt;Some applications require extra set of security because if someone get access to it, things can get ugly for you.
After reading this sad yet interesting &lt;a href="https://medium.com/p/24eb09e026dd" title="twitter account  stolen"&gt;story&lt;/a&gt;, I was astonished of how you can put a mess in someone's life by getting access to his/her mail account.
Not only you can change its password, you also can change the password of all applications linked to the hijacked address mail.
For instance you can virtually restart all the password of the associated social media. (e.g: Facebook)&lt;/p&gt;
&lt;h2&gt;Two-Factor Authentication&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2FA&lt;/strong&gt; try to solve this huge chink by applying a second identification step.
You've surely already experienced 2FA through online paiement. Banks widely use it by sending you a code to your mobile phone to enter it inside the paiement website to finalize the transaction.
Thus, the bank strengthen the identification process by asking you to make a "proof of work" only you can do. Even if the attacker got your credit card numbers he won't be able to get the paiement done without access to your mobile phone.&lt;/p&gt;
&lt;p&gt;This useful system is also available in mail clients such as gmail.
I strongly advice you to enable it since it will reinforce the overall security of your mails'access.
In the following section I describe the different steps to enable it in Gmail.&lt;/p&gt;
&lt;p&gt;Here a small scheme to illustrate the different steps:  &lt;br /&gt;
&lt;img alt="2FA principle" src="http://www.assurity.sg/onekey/2fa.gif" title="2fA" /&gt;&lt;/p&gt;
&lt;h2&gt;HOW-TO&lt;/h2&gt;
&lt;p&gt;In your account setting go to the security menu to see a 2-step verification link.... No I'm kidding. 
Google explain it better than I do :) .  &lt;br /&gt;
Here the &lt;a href="https://support.google.com/accounts/answer/180744?hl=en" title="2fa"&gt;link&lt;/a&gt;.
It's very easy and can be done in a matter of minutes. Doing this can't hurt.  &lt;br /&gt;
For those who blame the fact to rely on mobile phone, several substitutes are explained. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;N.B: As you may notice we can use interchangeably "two step verification" and "two-factor authentication"&lt;/em&gt;&lt;/p&gt;</summary><category term="Security"></category></entry><entry><title>Pelican</title><link href="/pelican.html" rel="alternate"></link><published>2014-01-09T23:58:00+01:00</published><author><name>ihommmani</name></author><id>tag:,2014-01-09:pelican.html</id><summary type="html">&lt;h1&gt;Presenting Pelican&lt;/h1&gt;
&lt;p&gt;When I'm reading a blog, besides the article, i'm also interested about the technology behind it. 
At first it was just good curiosity, to keep me up to date and see what reviews were made on it.
Then I started this blog. So I had to make my choice. And a clever one i.e adapted to my needs.
This choice was guided by these simple needs: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My blog has to be simple to host&lt;/li&gt;
&lt;li&gt;The tool generating it must be easy to handle&lt;/li&gt;
&lt;li&gt;The communauty behind it active&lt;/li&gt;
&lt;li&gt;Allow internationalisation i.e multi-languages articles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When it comes to host a site, there is no simpler than pure Html. No database, no logic, only text.
For this, static site generators are great. You give markup language file in input and you get html in output. 
There are a &lt;a href="http://staticsitegenerators.net/" title="generators list"&gt;lot of them&lt;/a&gt; out there. Each with a different technology, architecture... a different flavour. To give a try to each of them would take a long time so I mainly relied on my previous first searches to filter.
Github kindly provides free hosting through &lt;a href="http://pages.github.com/, gh-pages"&gt;github-pages&lt;/a&gt;. I took this oppurtunity and follow their tutorial taking advantage on the Jekyll generator.
But I encountered Pelican in my search and finally switched to it. &lt;/p&gt;
&lt;p&gt;This article provides answers on why I chose Pelican and not other generator. &lt;br /&gt;
&lt;strong&gt;This is not a tutorial. The official tutorial is enough &lt;a href="http://docs.getpelican.com/en/latest/" title="pelican doc"&gt;documented&lt;/a&gt; for this.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://jekyllrb.com/" title="Jekyll"&gt;Jekyll&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;First encounter&lt;/h3&gt;
&lt;p&gt;Like I said, I had my first static site generator experience with Jekyll. Unlike general first experiences, this, was not painful.
Thanks to a good &lt;a href="http://jekyllrb.com/docs/home/" title="jekyll tuto"&gt;tutorial&lt;/a&gt; I had a functional blog in less than an afternoon.
Jekyll engine is based on Ruby and take advantage of the liquid templating language.
Unfortunately after the basic HelloWorld, discord begun.&lt;br /&gt;
Still, Jekyll is not a bad choice and provided me with a better understanding of static site generator workflow.&lt;/p&gt;
&lt;h3&gt;The good&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fairly simple&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Publishing is as easy as pushing a commit. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using YAML for configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The bad&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Theming system&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Jekyll you have to specify on each post the layout to apply on it. When constructing a blog it's clearly the same layout we want for each post.
So it obviously left me a taste of duplication. If we want to change the theme, we have to change on each post the layout metadata which can be very tedious and error prone. (may you master awk...) .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Internationalisation&lt;/em&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Through this blog I want to write in several languages. It's not cocky at all it's just about reaching a wider audience. 
English is good for this but in my opinion it's better to show we also care about other languages. We don't only code in Java, C# or C++. We do also code in Python, Ruby, Javascript...
So let's consider languages like code languages.
Jekyll, is good to distinct categories and tag, but languages, its none. We cannot simply say that: "Look, those two articles are in fact the same. They do not share the same language, that's all".
I don't say you can't reach this, I'm just saying that it is not native in Jekyll. Someone proposed to use &lt;a href="http://www.garron.me/en/blog/jekyll-multi-language.html" title="blog"&gt;category&lt;/a&gt; as a substitute to language. In my opinion it's not the good way to do it. Language is not a category. If I have category movie with a post in english and chinese I have to make my choice 
between one category "Movie" and two categories "English" and "Chinese".
What I want is one category "Movie" and a link to switch from one language to another.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Integration with other sites&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I put it in the drawbacks but it depends on your preference. You can say I want to choose my own analytic system or comment system. In that case Jekyll 
is Ok for you. Or you can choose to prefer to only specify throuh configuration just one identifier you were provided with (disqus, ga...) and let the engine take care of the integration for you. No copy/paste needed in templates.   &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://blog.getpelican.com/" title="pelican"&gt;Pelican&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I knew Pelican before Jekyll but never gave it a try.
Pelican engine is built on top of Python and for this reason use the Jinja2 templating language.
It's a young project with a wide community of users and commiters.&lt;/p&gt;
&lt;h3&gt;The good: How does it fit to my needs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Plugins&lt;/em&gt;
Pelican provides an easy way to add features through plugins. 
There's github page 
To add a plugin to your site, you just have to specify the name in the setting file through the SETTING variable.
&lt;a href="https://github.com/getpelican/pelican-plugins ," title="pelican plugins"&gt;Here&lt;/a&gt; is a list of plugins you can try.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Themes&lt;/em&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pelican had a theming system somehow different from Jekyll's one. With Pelican it's more like a Plug'n play system.
Instead of manually specifying the layout on each post, you only precise once in the config file the Theme name. 
Moreover, there are plenty of &lt;a href="http://pelicanthemes.com/" title="themes"&gt;them&lt;/a&gt; hosted by gitHub. Pelican gives you a tool to manage themes installation and uninstall with pelican-theme CLI.
If you want to change your UI, you only have to change a metadata in the configfile and boom.
To bypass the theme, there is a possibility generate custom pages besides your blog entries. You can point any Jinja2 template file with a path pointing to the file and the destination path for the generated file.
Pelican also provide a usefull command &lt;em&gt;pelican-theme&lt;/em&gt; to manage themes properly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Internationalisation&lt;/em&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pelican is "traduction ready". That is to say, you can bound N articles as being the same article but with a different language.
For this, you just have to add two metadatas in your post:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The slug&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Slug&lt;/em&gt; is the link between the articles. All articles with the same slug will be considered as being the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Language&lt;/strong&gt;&lt;br /&gt;
    It comes with &lt;em&gt;slug&lt;/em&gt; and specify the link's name which will allow to switch beetween versions. An error will occur at the generation if you forget it. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Integration with other sites&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pelican's themes already embed some link to sites like Disqus or google-analitycs. You only have to specify in the config-file your identifiers. 
I think it's good idea for it does all the work for you. You don't have to copy paste anything in the layout because it's already there.
If you're not fine with those sites you still can modify the templates. (to know the path: pelican-themes -lv) 
And remember that most of metadatas you specify in the config file are variables used in the layout by Jinja.&lt;/p&gt;
&lt;h3&gt;The bad&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Github hosting&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately Pelican directory structure can't be pushed directly to the gh-pages repository. &lt;br /&gt;
But thanks to the tool &lt;a href="https://github.com/davisp/ghp-import" title="ghp-import"&gt;ghp-import&lt;/a&gt; it very easy.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;What can be said from all of that ?
Jekyll and Pelican are very similar. I guess it's a constant when talking about static site generator. Differences lay in the details. 
When it comes to construct a static site, Jekyll is a good to go. The liberty it provides is clearly an asset. 
But when it comes to construct a blog, you should give a try to Pelican. From my point of view, Pelican is more adapted for this than Jekyll. 
I see Pelican as an evolution of Jekyll specially adapted to my needs.
It provides me with a better experience and a smoother workflow.&lt;/p&gt;
&lt;p&gt;Mentionable: I haven't tried yet at the time I'm writting this article but It seems that &lt;a href="http://ruhoh.com/" title="ruho"&gt;Ruho&lt;/a&gt; could also be a good choice. &lt;/p&gt;</summary><category term="generator"></category></entry></feed>