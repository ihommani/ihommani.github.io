<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thinking about...</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2014-01-12T12:06:00+01:00</updated><entry><title>Pearltrees</title><link href="/pearltree.html" rel="alternate"></link><updated>2014-01-12T12:06:00+01:00</updated><author><name>ihommmani</name></author><id>tag:,2014-01-12:pearltree.html</id><summary type="html">&lt;p&gt;&lt;img alt="Alt Text" src="/images/pearltrees-logo.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Ces favoris qu'on oublie...&lt;/h2&gt;
&lt;p&gt;Lorsque nous surfons sur le web, il est très commun de repérer des sites qui ont un attrait particulier et sur lesquels nous souhaitons revenir plus tard.
De nos jours la plupart des navigateurs web proposent une fonction d'ajout de favoris, permettant de garder en mémoire des URL et de les classer. 
Un des avantages est que lorsque l'on tapera une url faisant parti du pool de ces favoris, le navigateur completera de manière intelligente l'url.
Mais cela présuppose qu'on ai retenu un mot clé de l'url et cela est rarement le cas. 
Et là se trouve selon moi l'éceuil principal des favoris. Les favoris tombent aux oubliettes.
pearltrees a bien saisi ce problème et se propose de libérer le potentiel des favoris à travers plusieurs concepts.&lt;/p&gt;
&lt;h2&gt;Alors qu'on devrais les cultiver...&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.pearltrees.com/" title="pearltrees"&gt;pearltrees&lt;/a&gt; est une webapplictation permettant d'organiser de manière intelligente et ludique ses favoris.
Conceptuellement il permet de ranger dans un &lt;a href="http://fr.wikipedia.org/wiki/Arbre_(graphe)" title="arbre"&gt;arbre&lt;/a&gt;, où chaque noeud (ou perle) est une catégorie et chaque feuille un favoris.&lt;br /&gt;
&lt;em&gt;Rq: C'est une structure composite, donc un noeud peut aussi contenir des noeuds.&lt;/em&gt;&lt;br /&gt;
Mais pearltrees ne serais pas digne d'intérêt s'il ne se limitait qu'à mimer la fonction "favoris" des navigateurs.  &lt;/p&gt;
&lt;h3&gt;Une interface riche et simple à la fois&lt;/h3&gt;
&lt;p&gt;Pour pouvoir profiter de pearltrees il est nécessaire d'installer &lt;strong&gt;un perleur&lt;/strong&gt; sur son navigateur après s'être créé un compte sur pearltrees. 
Le perleur est une extension du navigateur qui permettra par la suite de perler les sites que vous visitez.
Le workflow typique est le suivant. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Création de l'arbre&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En se connectant sur l'interface pearltrees on créera un arbre selon notre préférence en y ajoutant des noeuds thématiques. Attention je parle bien d'arbre et non de forêt. Un compte pearltrees basique ne permet pas la gestion multi-arbres.&lt;br /&gt;
Bien qu'accessible depuis un navigateur sur un ordinateur classique, pearltrees vise clairement un hardware mobile type tablette/fablette voire smartphone. 
Le glisser/déposer est en effet l'action la plus courante pour enrichir/organiser un arbre. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feuillaison&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le perleur ne permet pas de créer de perles thématique (noeud de l'arbre) mais de transformer les sites visités en perle (feuille de l'arbre).&lt;br /&gt;
Un problème peut se poser dans le cas où aucune perle thématique ne correspond au thème du site à perler.
Dans ce cas là il est possible de placer dans un &lt;strong&gt;panier&lt;/strong&gt; le site pour le greffer plus tard sur l'arbre.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entretien&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Au fur et à mesure de l'enrichissisement de l'arbre il arrivera un moment où l'on souhaitera réorganiser certaines branches, les supprimer ou les fusionner.&lt;br /&gt;
Il faudra aussi veiller à greffer les perles du panier dans l'arbre au risque de tomber dans l'écueil des favoris classique. &lt;/p&gt;
&lt;h2&gt;...pour les partager...&lt;/h2&gt;
&lt;p&gt;Nous vivons une ère d'internet dans laquelle nous créons le contenu pour ensuite le partager. Pearltrees est intégré aux acteurs majeurs du réseau social que sont twitter et facebook. Mais là ne réside pas l'intérêt principal de pearltrees car ce dernier permet surtout de partager des perles entre différents compte. 
Vous faite parti d'une équipe ayant pour tâche de réaliser un projet A. 
Pearltrees permet la collaboration en permettant le partages de perles qui serviront de pot commun aux connaissances pouvant faire avancer le projet. Un peu à la manière d'un blackboard. Ces perles peuvent prendre la forme de notes, de sites ou encore de photos.
Autre point d'intérêt, pearltrees vous envoi des alertes lorsqu'un site que vous avez perlé se retrouve perlé par un quelqu'un d'autre. De cette manière on se remémore assez souvent les sites que nous avions décidé de perler.&lt;/p&gt;
&lt;h2&gt;... et découvrir d'autres sites d'intérêts&lt;/h2&gt;
&lt;p&gt;Pearltrees intègre un moteur de recherche permettant de rechercher des centre d'intérêts parmis les arbres d'autres personnes. 
Par ailleurs une fonction "Voisin" essaye de trouver de manière la plus pertinente les perles thématiquement proches d'un noeud selectionné.
Je ne connais pas l'algorithme utilisé mais je suppose qu'il est important à ce titre de bien organiser ces perles afin d'avoir des résultat intéressants.&lt;/p&gt;
&lt;h2&gt;Que faire de ces anciens favoris ?&lt;/h2&gt;
&lt;p&gt;Une fonction d'import fonctionnant avec la plupart des navigateurs permet d'importer ses favoris. 
Il s'agit d'un bon point de départ si vous n'avez pas encore d'arbre.&lt;/p&gt;
&lt;h3&gt;Pas de pub&lt;/h3&gt;
&lt;p&gt;Pearltrees est gratuit dans sa version basique et offre une capacité de stockage de 250Mo (largement suffisant dans la plupart des cas). Par expérience, cette gratuité a souvent été accompagnée de banières publicitaires nuisant à la lisibilité. 
Or ce n'est pas le cas de pearltrees. En revanche nous serons sollicités pour passer à la version premium. Mais bon cela est tout à fait compréhensible.&lt;/p&gt;
&lt;h3&gt;Quid de la confidentialité et de la propriété du contenu ?&lt;/h3&gt;
&lt;p&gt;En compte basique, les perles sont publiques. Seuls les membres premiums peuvent bénéficier de perles privées.
Néanmoins, chaque utilisateur est propriétaire de ses données. Donc en théorie elles ne peuvent être utilisées à des fins commerciales.
Pour les plus frileux d'entre vous, vous pouvez toujours décortiquer leur &lt;a href="http://www.pearltrees.com/info/privacy" title="privacy"&gt;charte&lt;/a&gt; de confidentialité. &lt;/p&gt;
&lt;h2&gt;En conclusion&lt;/h2&gt;
&lt;p&gt;Pearltrees est un outil qui d'après moi permet de libérer le potentiel de l'action d'ajout de favoris.
Ce qu'il permet n'est pas simplement d'acumuler des liens mais bien de créer une cartographie colaborative du web. 
Je trouve cette approche très intéressante et gageons que je ne sois pas le seul.&lt;/p&gt;</summary><category term="outils"></category></entry><entry><title>Pelican</title><link href="/pelican.html" rel="alternate"></link><updated>2014-01-09T23:58:00+01:00</updated><author><name>ihommmani</name></author><id>tag:,2014-01-09:pelican.html</id><summary type="html">&lt;h1&gt;Presenting Pelican&lt;/h1&gt;
&lt;p&gt;When I'm reading a blog, besides the article, i'm also interested about the technology behind it. 
At first it was just good curiosity, to keep me up to date and see what reviews were made on it.
Then I started this blog. So I had to make my choice. And a clever one i.e adapted to my needs.
This choice was guided by these simple needs: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My blog has to be simple to host&lt;/li&gt;
&lt;li&gt;The tool generating it must be easy to handle&lt;/li&gt;
&lt;li&gt;The communauty behind it active&lt;/li&gt;
&lt;li&gt;Allow internationalisation i.e multi-languages articles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When it comes to host a site, there is no simpler than pure Html. No database, no logic, only text.
For this, static site generators are great. You give markup language file in input and you get html in output. 
There are a &lt;a href="http://staticsitegenerators.net/" title="generators list"&gt;lot of them&lt;/a&gt; out there. Each with a different technology, architecture... a different flavour. To give a try to each of them would take a long time so I mainly relied on my previous first searches to filter.
Github kindly provides free hosting through &lt;a href="http://pages.github.com/,%20gh-pages"&gt;github-pages&lt;/a&gt;. I took this oppurtunity and follow their tutorial taking advantage on the Jekyll generator.
But I encountered Pelican in my search and finally switched to it. &lt;/p&gt;
&lt;p&gt;This article provides answers on why I chose Pelican and not other generator. &lt;br /&gt;
&lt;strong&gt;This is not a tutorial. The official tutorial is enough &lt;a href="http://docs.getpelican.com/en/latest/" title="pelican doc"&gt;documented&lt;/a&gt; for this.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://jekyllrb.com/" title="Jekyll"&gt;Jekyll&lt;/a&gt;&lt;/h2&gt;
&lt;h3&gt;First encounter&lt;/h3&gt;
&lt;p&gt;Like I said, I had my first static site generator experience with Jekyll. Unlike general first experiences, this, was not painful.
Thanks to a good &lt;a href="http://jekyllrb.com/docs/home/" title="jekyll tuto"&gt;tutorial&lt;/a&gt; I had a functional blog in less than an afternoon.
Jekyll engine is based on Ruby and take advantage of the liquid templating language.
Unfortunately after the basic HelloWorld, discord begun.&lt;br /&gt;
Still, Jekyll is not a bad choice and provided me with a better understanding of static site generator workflow.&lt;/p&gt;
&lt;h3&gt;The good&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fairly simple&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Publishing is as easy as pushing a commit. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using YAML for configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The bad&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Theming system&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Jekyll you have to specify on each post the layout to apply on it. When constructing a blog it's clearly the same layout we want for each post.
So it obviously left me a taste of duplication. If we want to change the theme, we have to change on each post the layout metadata which can be very tedious and error prone. (may you master awk...) .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Internationalisation&lt;/em&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Through this blog I want to write in several languages. It's not cocky at all it's just about reaching a wider audience. 
English is good for this but in my opinion it's better to show we also care about other languages. We don't only code in Java, C# or C++. We do also code in Python, Ruby, Javascript...
So let's consider languages like code languages.
Jekyll, is good to distinct categories and tag, but languages, its none. We cannot simply say that: "Look, those two articles are in fact the same. They do not share the same language, that's all".
I don't say you can't reach this, I'm just saying that it is not native in Jekyll. Someone proposed to use &lt;a href="http://www.garron.me/en/blog/jekyll-multi-language.html" title="blog"&gt;category&lt;/a&gt; as a substitute to language. In my opinion it's not the good way to do it. Language is not a category. If I have category movie with a post in english and chinese I have to make my choice 
between one category "Movie" and two categories "English" and "Chinese".
What I want is one category "Movie" and a link to switch from one language to another.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Integration with other sites&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I put it in the drawbacks but it depends on your preference. You can say I want to choose my own analytic system or comment system. In that case Jekyll 
is Ok for you. Or you can choose to prefer to only specify throuh configuration just one identifier you were provided with (disqus, ga...) and let the engine take care of the integration for you. No copy/paste needed in templates.   &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://blog.getpelican.com/" title="pelican"&gt;Pelican&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I knew Pelican before Jekyll but never gave it a try.
Pelican engine is built on top of Python and for this reason use the Jinja2 templating language.
It's a young project with a wide community of users and commiters.&lt;/p&gt;
&lt;h3&gt;The good: How does it fit to my needs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Themes&lt;/em&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pelican had a theming system somehow different from Jekyll's one. With Pelican it's more like a Plug'n play system.
Instead of manually specifying the layout on each post, you only precise once in the config file the Theme name. 
Moreover, there are plenty of &lt;a href="http://pelicanthemes.com/" title="themes"&gt;them&lt;/a&gt; hosted by gitHub. Pelican gives you a tool to manage themes installation and uninstall with pelican-theme CLI.
If you want to change your UI, you only have to change a metadata in the configfile and boom.
To bypass the theme, there is a possibility generate custom pages besides your blog entries. You can point any Jinja2 template file with a path pointing to the file and the destination path for the generated file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Internationalisation&lt;/em&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pelican is "traduction ready". That is to say, you can bound N articles as being the same article but with a different language.
For this, you just have to add two metadatas in your post:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The slug&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Slug&lt;/em&gt; is the link between the articles. All articles with the same slug will be considered as being the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Language&lt;/strong&gt;&lt;br /&gt;
    It comes with &lt;em&gt;slug&lt;/em&gt; and specify the link's name which will allow to switch beetween versions. An error will occur at the generation if you forget it. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Integration with other sites&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pelican's themes already embed some link to sites like Disqus or google-analitycs. You only have to specify in the config-file your identifiers. 
I think it's good idea for it does all the work for you. You don't have to copy paste anything in the layout because it's already there.
If you're not fine with those sites you still can modify the templates. (to know the path: pelican-themes -lv) 
And remember that most of metadatas you specify in the config file are variables used in the layout by Jinja.&lt;/p&gt;
&lt;h3&gt;The bad&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Github hosting&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately Pelican directory structure can't be pushed directly to the gh-pages repository. &lt;br /&gt;
But thanks to the tool &lt;a href="https://github.com/davisp/ghp-import" title="ghp-import"&gt;ghp-import&lt;/a&gt; it very easy.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;What can be said from all of that ?
Jekyll and Pelican are very similar. I guess it's a constant when talking about static site generator. Differences lay in the details. 
When it comes to construct a static site, Jekyll is a good to go. The liberty it provides is clearly an asset. 
But when it comes to construct a blog, you should give a try to Pelican. From my point of view, Pelican is more adapted for this than Jekyll. 
I see Pelican as an evolution of Jekyll specially adapted to my needs.
It provides me with a better experience and a smoother workflow.&lt;/p&gt;
&lt;p&gt;Mentionable: I haven't tried yet at the time I'm writting this article but It seems that &lt;a href="http://ruhoh.com/" title="ruho"&gt;Ruho&lt;/a&gt; could also be a good choice. &lt;/p&gt;</summary><category term="generator"></category></entry></feed>